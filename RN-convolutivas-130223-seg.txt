#Redes Neurais Convolutivas para processamento de imagens 
# 13/02/23 

import tensorflow as tf 
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt 

#carregando os dados 
(train_images, train_labels), (test_images, test_labels) = 
datasets.cifar10.load_data()  
#Cifar10 e Cifar100: número de categorias 
train_images = train_images/255.0 
test_images = test_images/255.0 
#Cuidar com a normalização: dividir muito por 255 tende a zero e a imagem some. Dividir somente uma vez. 

categorias = ['aeronave', 'automovel', 'ave', 'gato', 'cervo', 'cachorro', 'sapo', 'cavalo', 'barco', 'caminhao']

#plotagem das imagens coloridas 

plt.figure(figsize=(10,10))

for i in range (25) 
	plt.subplot(5, 5, i+1)
	plt.xticks([])
	plt.yticks([])
	plt.grid(False) 
	plt.imshow(train_images[i])
	plt.xlabel(categorias[train_labels[i][0]])

plt.show

#Camadas 
modelo = models.Sequential()

modelo.add(layers.Conv2D(32, (3,3), activation = 'relu', input_shape = (32, 32, 3))) #primeiro 32: número de neurônios 
modelo.add(layers.MaxPooling2D((2,2)))
modelo.add(layers.Conv2D(64, (3,3), activation = 'relu')) 
modelo.add(layers.MaxPooling2D((2,2)))
modelo.add(layers.Conv2D(64, (3,3), activation = 'relu'))
modelo.summary()

modelo.add(layers.Flatten())
modelo.add(layers.Dense(64, activation = 'relu'))
modelo.add(layers.Dense(10, activation = 'softmax')) #softmax normaliza os dados - função de ativação 

modelo.summary() #checar diferenças 



#15/02/23 - Redes Neurais Convolutivas: continuação ---------------------------------------------------------------------

modelo.compile(optimizer:'adam', loss=SparseCategoricalCrossentropy(), metrics=['accuracy'])

#treinamento e validação ao mesmo tempo - a cada época de treinamento ele faz uma validação - o treinamento fica mais lento, 
#mas é ideal para treinamentos com poucos dados 
history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels))

plt.plot(history.history['accuracy'], label='Treinamento')
plt.plot(history.history['val-accuracy'], label='Validacao')
plt.xlabel('Epoca')
plt.ylabel('Acuracia')
plt.ylim([0.4, 1.0])
plt.legend(loc='lower right')


